    // prisma/schema.prisma

    generator client {
      provider = "prisma-client-js"
    }

    datasource db {
      provider = "sqlite" // SQLite を使用
      url      = env("DATABASE_URL")
    }

    // 既存の users テーブルから team_memberships テーブルまでのモデル定義
    model users {
      id                       Int             @id @default(autoincrement())
      name                     String          // @db.VarChar(255) を削除
      email                    String          @unique // @db.VarChar(255) を削除
      password_hash            String          // @db.VarChar(255) を削除
      created_at               DateTime        @default(now()) // @db.Timestamp(0) を削除
      updated_at               DateTime        @default(now()) @updatedAt // @db.Timestamp(0) を削除
      user_profiles            user_profiles?
      user_product_genres      user_product_genres[]
      user_availabilities      user_availabilities[]
      user_team_priorities     user_team_priorities[]
      team_memberships         team_memberships[]
      initiated_matches        match_results[] @relation("InitiatingMatches")
      received_matches         match_results[] @relation("MatchedUsers")
    }

    model user_profiles {
      user_id                      Int             @id @map("user_id")
      personality_type             String?         // @db.VarChar(50) を削除
      idea_status                  String?         // @db.VarChar(50) を削除
      desired_role_in_team         String?         // @db.VarChar(50) を削除
      self_introduction_comment    String?         // @db.Text を削除 (String に自動マッピングされる)
      created_at                   DateTime        @default(now()) // @db.Timestamp(0) を削除
      updated_at                   DateTime        @default(now()) @updatedAt // @db.Timestamp(0) を削除
      user                         users           @relation(fields: [user_id], references: [id])

      @@map("user_profiles")
    }

    model product_genres {
      id                       Int                   @id @default(autoincrement())
      name                     String                @unique // @db.VarChar(100) を削除
      created_at               DateTime              @default(now()) // @db.Timestamp(0) を削除
      updated_at               DateTime              @default(now()) @updatedAt // @db.Timestamp(0) を削除
      user_product_genres      user_product_genres[]

      @@map("product_genres")
    }

    model user_product_genres {
      user_id          Int
      product_genre_id Int
      created_at       DateTime        @default(now()) // @db.Timestamp(0) を削除
      user             users           @relation(fields: [user_id], references: [id])
      product_genre    product_genres  @relation(fields: [product_genre_id], references: [id])

      @@id([user_id, product_genre_id])
      @@map("user_product_genres")
    }

    model availability_timeslots {
      id                    Int                   @id @default(autoincrement())
      description           String                @unique // @db.VarChar(100) を削除
      day_type              String                // @db.Enum("weekday", "weekend_holiday") を削除し、String 型にする
      sort_order            Int?
      created_at            DateTime              @default(now()) // @db.Timestamp(0) を削除
      updated_at            DateTime              @default(now()) @updatedAt // @db.Timestamp(0) を削除
      user_availabilities   user_availabilities[]

      @@map("availability_timeslots")
    }

    model user_availabilities {
      user_id      Int
      timeslot_id  Int
      created_at   DateTime               @default(now()) // @db.Timestamp(0) を削除
      user         users                  @relation(fields: [user_id], references: [id])
      timeslot     availability_timeslots @relation(fields: [timeslot_id], references: [id])

      @@id([user_id, timeslot_id])
      @@map("user_availabilities")
    }

    model team_priorities {
      id                     Int                   @id @default(autoincrement())
      name                   String                @unique // @db.VarChar(100) を削除
      created_at             DateTime              @default(now()) // @db.Timestamp(0) を削除
      updated_at             DateTime              @default(now()) @updatedAt // @db.Timestamp(0) を削除
      user_team_priorities   user_team_priorities[]

      @@map("team_priorities")
    }

    model user_team_priorities {
      user_id          Int
      team_priority_id Int
      created_at       DateTime         @default(now()) // @db.Timestamp(0) を削除
      user             users            @relation(fields: [user_id], references: [id])
      team_priority    team_priorities  @relation(fields: [team_priority_id], references: [id])

      @@id([user_id, team_priority_id])
      @@map("user_team_priorities")
    }

    model course_steps {
      id           Int      @id @default(autoincrement())
      name         String   @unique // @db.VarChar(100) を削除
      start_date   DateTime? // @db.Date を削除 (DateTimeで日付も保持できる)
      end_date     DateTime? // @db.Date を削除
      description  String?  // @db.Text を削除 (String に自動マッピングされる)
      created_at   DateTime @default(now()) // @db.Timestamp(0) を削除
      updated_at   DateTime @default(now()) @updatedAt // @db.Timestamp(0) を削除
      teams        teams[]

      @@map("course_steps")
    }

    model teams {
      id             Int                @id @default(autoincrement())
      course_step_id Int
      name           String             // @db.VarChar(100) を削除
      project_name   String?            // @db.VarChar(255) を削除
      created_at     DateTime           @default(now()) // @db.Timestamp(0) を削除
      updated_at     DateTime           @default(now()) @updatedAt // @db.Timestamp(0) を削除
      course_step    course_steps       @relation(fields: [course_step_id], references: [id])
      team_memberships team_memberships[]

      @@map("teams")
    }

    model team_memberships {
      id             Int       @id @default(autoincrement())
      team_id        Int
      user_id        Int
      role_in_team   String?   // @db.VarChar(50) を削除
      joined_at      DateTime  @default(now()) // @db.Timestamp(0) を削除
      left_at        DateTime? // @db.Timestamp(0) を削除
      created_at     DateTime  @default(now()) // @db.Timestamp(0) を削除
      updated_at     DateTime  @default(now()) @updatedAt // @db.Timestamp(0) を削除
      team           teams     @relation(fields: [team_id], references: [id])
      user           users     @relation(fields: [user_id], references: [id])

      @@map("team_memberships")
    }

    // 新しく追加された match_results テーブル
    model match_results {
      id              Int       @id @default(autoincrement())
      user_id         Int
      matched_user_id Int
      score           Float?
      match_reason    String?   // @db.Text を削除
      created_at      DateTime  @default(now()) // @db.Timestamp(0) を削除

      user          users @relation("InitiatingMatches", fields: [user_id], references: [id])
      matched_user  users @relation("MatchedUsers", fields: [matched_user_id], references: [id])

      @@unique([user_id, matched_user_id])
      @@map("match_results")
    }

    enum DayType {
      weekday
      weekend_holiday
    }
