generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  email                String                 @unique @db.VarChar(255)
  password_hash        String                 @db.VarChar(255)
  created_at           DateTime               @default(now()) @db.Timestamp(0)
  updated_at           DateTime               @default(now()) @updatedAt @db.Timestamp(0)
  team_memberships     team_memberships[]
  user_availabilities  user_availabilities[]
  user_product_genres  user_product_genres[]
  user_profiles        user_profiles?
  user_team_priorities user_team_priorities[]
}

model user_profiles {
  user_id                   Int      @id @map("user_id")
  personality_type          String?  @db.VarChar(50)
  idea_status               String?  @db.VarChar(50)
  desired_role_in_team      String?  @db.VarChar(50)
  self_introduction_comment String?  @db.Text
  created_at                DateTime @default(now()) @db.Timestamp(0)
  updated_at                DateTime @default(now()) @updatedAt @db.Timestamp(0)
  user                      users    @relation(fields: [user_id], references: [id])

  @@map("user_profiles")
}

model product_genres {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(100)
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  updated_at          DateTime              @default(now()) @updatedAt @db.Timestamp(0)
  user_product_genres user_product_genres[]

  @@map("product_genres")
}

model user_product_genres {
  user_id          Int
  product_genre_id Int
  created_at       DateTime       @default(now()) @db.Timestamp(0)
  product_genre    product_genres @relation(fields: [product_genre_id], references: [id])
  user             users          @relation(fields: [user_id], references: [id])

  @@id([user_id, product_genre_id])
  @@index([product_genre_id], map: "user_product_genres_product_genre_id_fkey")
  @@map("user_product_genres")
}

model availability_timeslots {
  id                  Int                   @id @default(autoincrement())
  description         String                @unique @db.VarChar(100)
  day_type            DayType
  sort_order          Int?
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  updated_at          DateTime              @default(now()) @updatedAt @db.Timestamp(0)
  user_availabilities user_availabilities[]

  @@map("availability_timeslots")
}

model user_availabilities {
  user_id     Int
  timeslot_id Int
  created_at  DateTime               @default(now()) @db.Timestamp(0)
  timeslot    availability_timeslots @relation(fields: [timeslot_id], references: [id])
  user        users                  @relation(fields: [user_id], references: [id])

  @@id([user_id, timeslot_id])
  @@index([timeslot_id], map: "user_availabilities_timeslot_id_fkey")
  @@map("user_availabilities")
}

model team_priorities {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique @db.VarChar(100)
  created_at           DateTime               @default(now()) @db.Timestamp(0)
  updated_at           DateTime               @default(now()) @updatedAt @db.Timestamp(0)
  user_team_priorities user_team_priorities[]

  @@map("team_priorities")
}

model user_team_priorities {
  user_id          Int
  team_priority_id Int
  created_at       DateTime        @default(now()) @db.Timestamp(0)
  team_priority    team_priorities @relation(fields: [team_priority_id], references: [id])
  user             users           @relation(fields: [user_id], references: [id])

  @@id([user_id, team_priority_id])
  @@index([team_priority_id], map: "user_team_priorities_team_priority_id_fkey")
  @@map("user_team_priorities")
}

model course_steps {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  start_date  DateTime? @db.Date
  end_date    DateTime? @db.Date
  description String?   @db.Text
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  teams       teams[]

  @@map("course_steps")
}

model teams {
  id               Int                @id @default(autoincrement())
  course_step_id   Int
  name             String             @db.VarChar(100)
  project_name     String?            @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  updated_at       DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  team_memberships team_memberships[]
  course_step      course_steps       @relation(fields: [course_step_id], references: [id])

  @@index([course_step_id], map: "teams_course_step_id_fkey")
  @@map("teams")
}

model team_memberships {
  id           Int       @id @default(autoincrement())
  team_id      Int
  user_id      Int
  role_in_team String?   @db.VarChar(50)
  joined_at    DateTime  @default(now()) @db.Timestamp(0)
  left_at      DateTime? @db.Timestamp(0)
  created_at   DateTime  @default(now()) @db.Timestamp(0)
  updated_at   DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  team         teams     @relation(fields: [team_id], references: [id])
  user         users     @relation(fields: [user_id], references: [id])

  @@index([team_id], map: "team_memberships_team_id_fkey")
  @@index([user_id], map: "team_memberships_user_id_fkey")
  @@map("team_memberships")
}

enum DayType {
  weekday
  weekend_holiday
}
