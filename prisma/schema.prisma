generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model users {
  id                   Int                    @id @default(autoincrement())
  name                 String
  email                String                 @unique
  password_hash        String
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now()) @updatedAt
  received_matches     match_results[]        @relation("MatchedUsers")
  initiated_matches    match_results[]        @relation("InitiatingMatches")
  team_memberships     team_memberships[]
  user_availabilities  user_availabilities[]
  user_product_genres  user_product_genres[]
  user_profiles        user_profiles?
  user_team_priorities user_team_priorities[]
}

model user_profiles {
  user_id                   Int      @id @default(autoincrement()) @map("user_id")
  personality_type          String?
  idea_status               String?
  desired_role_in_team      String?
  self_introduction_comment String?
  created_at                DateTime @default(now())
  updated_at                DateTime @default(now()) @updatedAt
  user                      users    @relation(fields: [user_id], references: [id])

  @@map("user_profiles")
}

model product_genres {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now()) @updatedAt
  user_product_genres user_product_genres[]

  @@map("product_genres")
}

model user_product_genres {
  user_id          Int
  product_genre_id Int
  created_at       DateTime       @default(now())
  product_genre    product_genres @relation(fields: [product_genre_id], references: [id])
  user             users          @relation(fields: [user_id], references: [id])

  @@id([user_id, product_genre_id])
  @@map("user_product_genres")
}

model availability_timeslots {
  id                  Int                   @id @default(autoincrement())
  description         String                @unique
  day_type            String
  sort_order          Int?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now()) @updatedAt
  user_availabilities user_availabilities[]

  @@map("availability_timeslots")
}

model user_availabilities {
  user_id     Int
  timeslot_id Int
  created_at  DateTime               @default(now())
  timeslot    availability_timeslots @relation(fields: [timeslot_id], references: [id])
  user        users                  @relation(fields: [user_id], references: [id])

  @@id([user_id, timeslot_id])
  @@map("user_availabilities")
}

model team_priorities {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now()) @updatedAt
  user_team_priorities user_team_priorities[]

  @@map("team_priorities")
}

model user_team_priorities {
  user_id          Int
  team_priority_id Int
  created_at       DateTime        @default(now())
  team_priority    team_priorities @relation(fields: [team_priority_id], references: [id])
  user             users           @relation(fields: [user_id], references: [id])

  @@id([user_id, team_priority_id])
  @@map("user_team_priorities")
}

model course_steps {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  start_date  DateTime?
  end_date    DateTime?
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  teams       teams[]

  @@map("course_steps")
}

model teams {
  id               Int                @id @default(autoincrement())
  course_step_id   Int
  name             String
  project_name     String?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
  team_memberships team_memberships[]
  course_step      course_steps       @relation(fields: [course_step_id], references: [id])

  @@map("teams")
}

model team_memberships {
  id           Int       @id @default(autoincrement())
  team_id      Int
  user_id      Int
  role_in_team String?
  joined_at    DateTime  @default(now())
  left_at      DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt
  user         users     @relation(fields: [user_id], references: [id])
  team         teams     @relation(fields: [team_id], references: [id])

  @@map("team_memberships")
}

model match_results {
  id              Int      @id @default(autoincrement())
  user_id         Int
  matched_user_id Int
  score           Float?
  match_reason    String?
  created_at      DateTime @default(now())
  matched_user    users    @relation("MatchedUsers", fields: [matched_user_id], references: [id])
  user            users    @relation("InitiatingMatches", fields: [user_id], references: [id])

  @@unique([user_id, matched_user_id])
  @@map("match_results")
}
