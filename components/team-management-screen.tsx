"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Users, Plus, Calendar, User, ArrowLeft, CheckCircle, AlertCircle, X, ChevronsUpDown, Trash2 } from "lucide-react";

interface TeamManagementScreenProps {
  onNavigate: (screen: string) => void;
}

interface TeamMember {
  user_id: number;
  user_name: string;
  user_email: string;
  role_in_team: string | null;
  joined_at: string;
}

interface Team {
  id: number;
  course_step_id: number;
  name: string;
  project_name: string | null;
  created_at: string;
  course_step_name: string;
  members: TeamMember[];
}

interface CourseStep {
  id: number;
  name: string;
  start_date: string | null;
  end_date: string | null;
}

interface UserOption {
  id: number;
  name: string;
  email: string;
  role?: string | null;
}

interface SelectedTeamMember {
  user_id: number;
  user_name: string;
  user_email: string;
  role_in_team: string | null;
}

const createTeamRoleOptions = [
  { value: "unspecified", label: "ÂΩπÂâ≤„ÇíÈÅ∏Êäû" },
  { value: "biz", label: "Biz" },
  { value: "tech", label: "Tech" },
  { value: "design", label: "Design" },
];

export default function TeamManagementScreen({ onNavigate }: TeamManagementScreenProps) {
  const [teams, setTeams] = useState<Team[]>([]);
  const [courseSteps, setCourseSteps] = useState<CourseStep[]>([]);
  const [selectedCourseStep, setSelectedCourseStep] = useState<number | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [newTeam, setNewTeam] = useState({
    name: "",
    project_name: "",
    course_step_id: null as number | null,
    creator_role: "unspecified",
  });
  const [selectedMembers, setSelectedMembers] = useState<SelectedTeamMember[]>([]);
  const [userOptions, setUserOptions] = useState<UserOption[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [isUserDropdownOpen, setIsUserDropdownOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState<string[]>([]);
  const [successMessage, setSuccessMessage] = useState("");

  useEffect(() => {
    loadData();
  }, [selectedCourseStep]);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const excludeIds = Array.isArray(selectedMembers)
          ? selectedMembers
              .map((member) => member?.user_id)
              .filter((id) => id !== undefined)
              .join(",")
          : "";

        const response = await fetch(`/api/users?query=${encodeURIComponent(searchQuery)}&excludeIds=${excludeIds}`);

        if (response.ok) {
          const data = await response.json();
          if (data && data.success && data.users && Array.isArray(data.users)) {
            setUserOptions(
              data.users.map((user: any) => ({
                id: user?.id || 0,
                name: user?.name || "Unknown",
                email: user?.email || "",
                role: user?.profile?.desired_role_in_team || null,
              }))
            );
          } else {
            console.error("„É¶„Éº„Ç∂„ÉºÊ§úÁ¥¢API„Ç®„É©„Éº: 'users'„Éá„Éº„Çø„Åå‰∏çÊ≠£„Åß„Åô", data);
            setUserOptions([]);
          }
        } else {
          console.error("„É¶„Éº„Ç∂„ÉºÊ§úÁ¥¢API„Ç®„É©„Éº:", response.status, response.statusText);
          setUserOptions([]);
        }
      } catch (error) {
        console.error("„É¶„Éº„Ç∂„ÉºÊ§úÁ¥¢„Ç®„É©„Éº:", error);
        setUserOptions([]);
      }
    };

    if (isUserDropdownOpen) {
      fetchUsers();
    }
  }, [searchQuery, isUserDropdownOpen, selectedMembers]);

  const loadData = async () => {
    try {
      const masterResponse = await fetch("/api/master-data");
      if (masterResponse.ok) {
        const masterResult = await masterResponse.json();
        if (masterResult.success && masterResult.data && masterResult.data.courseSteps) {
          setCourseSteps(masterResult.data.courseSteps);
        } else {
          console.error("„Éû„Çπ„Çø„Éº„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº: 'courseSteps'„Éá„Éº„Çø„Åå‰∏çÊ≠£„Åß„Åô", masterResult.error);
          setCourseSteps([]);
        }
      } else {
        console.error("„Éû„Çπ„Çø„Éº„Éá„Éº„ÇøAPI„Ç®„É©„Éº:", masterResponse.status, masterResponse.statusText);
        setCourseSteps([]);
      }

      const params = new URLSearchParams();
      params.append("userId", "1");
      if (selectedCourseStep) {
        params.append("courseStepId", selectedCourseStep.toString());
      }

      const teamsResponse = await fetch(`/api/teams?${params}`);
      if (teamsResponse.ok) {
        const teamsResult = await teamsResponse.json();

        console.log("üåê Teams API Response:", {
          success: teamsResult.success,
          teamsCount: teamsResult.teams?.length || 0,
          fullResponse: teamsResult,
        });

        if (teamsResult.success && Array.isArray(teamsResult.teams)) {
          teamsResult.teams.forEach((team: any, index: number) => {
            console.log(`üë• Team ${index + 1}: ${team.name}`);
            if (team.members && Array.isArray(team.members)) {
              team.members.forEach((member: any, mIndex: number) => {
                console.log(`  üë§ Member ${mIndex + 1}:`, {
                  name: member.user_name,
                  email: member.user_email,
                  role_in_team: member.role_in_team,
                  role_type: typeof member.role_in_team,
                  role_json: JSON.stringify(member.role_in_team),
                });
              });
            }
          });

          setTeams(teamsResult.teams);
        } else {
          console.error("‚ùå Teams data invalid:", teamsResult);
          setTeams([]);
        }
      } else {
        console.error("‚ùå Teams API error:", teamsResponse.status);
        setTeams([]);
      }
    } catch (error) {
      console.error("„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº:", error);
      setCourseSteps([]);
      setTeams([]);
    }
  };

  const deleteTeam = async (teamId: number, teamName: string) => {
    if (!confirm(`„Äå${teamName}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\n\n„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ`)) {
      return;
    }

    setIsLoading(true);
    setErrors([]);
    setSuccessMessage("");

    try {
      const response = await fetch(`/api/teams?teamId=${teamId}`, {
        method: "DELETE",
      });

      const data = await response.json();

      if (data.success) {
        console.log("„ÉÅ„Éº„É†ÂâäÈô§ÊàêÂäü");
        setSuccessMessage(`„Äå${teamName}„Äç„ÅåÂâäÈô§„Åï„Çå„Åæ„Åó„Åü`);
        await loadData();
      } else {
        console.error("ÂâäÈô§„Ç®„É©„Éº:", data.error);
        setErrors([`ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${data.error}`]);
      }
    } catch (error) {
      console.error("ÂâäÈô§„É™„ÇØ„Ç®„Çπ„Éà„Ç®„É©„Éº:", error);
      setErrors(["ÂâäÈô§‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü"]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateTeam = async () => {
    console.log("üöÄ „ÉÅ„Éº„É†‰ΩúÊàê„Éú„Çø„É≥„Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„ÅüÔºÅ");
    console.log("üîÑ LoadingÁä∂ÊÖã„ÇíË®≠ÂÆö‰∏≠...");

    setIsLoading(true);
    setErrors([]);
    setSuccessMessage("");

    try {
      console.log("=== VALIDATION DEBUG START ===");
      console.log("newTeam:", newTeam);
      console.log("selectedMembers:", selectedMembers);
      console.log("newTeam.name.trim():", `"${newTeam.name.trim()}"`);
      console.log("newTeam.course_step_id:", newTeam.course_step_id);
      console.log("selectedMembers.length:", selectedMembers.length);
      console.log("newTeam.creator_role:", `"${newTeam.creator_role}"`);

      const validationErrors: string[] = [];

      // „ÉÅ„Éº„É†Âêç„ÉÅ„Çß„ÉÉ„ÇØ
      if (!newTeam.name.trim()) {
        console.log("‚ùå „ÉÅ„Éº„É†Âêç„ÅåÁ©∫„Åß„Åô");
        validationErrors.push("„ÉÅ„Éº„É†Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
      } else {
        console.log("‚úÖ „ÉÅ„Éº„É†ÂêçOK:", `"${newTeam.name.trim()}"`);
      }

      // „Çπ„ÉÜ„ÉÉ„Éó„ÉÅ„Çß„ÉÉ„ÇØ
      if (newTeam.course_step_id === null) {
        console.log("‚ùå „Çπ„ÉÜ„ÉÉ„Éó„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì");
        validationErrors.push("„Çπ„ÉÜ„ÉÉ„Éó„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
      } else {
        console.log("‚úÖ „Çπ„ÉÜ„ÉÉ„ÉóOK:", newTeam.course_step_id);
      }

      // „É°„É≥„Éê„Éº„ÉÅ„Çß„ÉÉ„ÇØ
      if (selectedMembers.length === 0) {
        console.log("‚ùå „É°„É≥„Éê„Éº„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì");
        validationErrors.push("„É°„É≥„Éê„Éº„Çí1‰∫∫‰ª•‰∏äÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
      } else {
        console.log("‚úÖ „É°„É≥„Éê„ÉºOK:", selectedMembers.length, "‰∫∫");
      }

      // ‰ΩúÊàêËÄÖÂΩπÂâ≤„ÉÅ„Çß„ÉÉ„ÇØ
      if (newTeam.creator_role === "unspecified") {
        console.log("‚ùå ‰ΩúÊàêËÄÖ„ÅÆÂΩπÂâ≤„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì");
        validationErrors.push("„ÅÇ„Å™„Åü„ÅÆÂΩπÂâ≤„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
      } else {
        console.log("‚úÖ ‰ΩúÊàêËÄÖÂΩπÂâ≤OK:", `"${newTeam.creator_role}"`);
      }

      // ÂêÑ„É°„É≥„Éê„Éº„ÅÆÂΩπÂâ≤„ÉÅ„Çß„ÉÉ„ÇØ
      selectedMembers.forEach((member, index) => {
        console.log(`Member ${index + 1} (${member.user_name}):`, {
          role_in_team: member.role_in_team,
          is_unspecified: member.role_in_team === "unspecified",
          is_empty: !member.role_in_team,
        });

        if (!member.role_in_team || member.role_in_team === "unspecified") {
          console.log(`‚ùå ${member.user_name} „ÅÆÂΩπÂâ≤„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì`);
          validationErrors.push(`${member.user_name} „ÅÆ„ÉÅ„Éº„É†ÂÜÖ„Åß„ÅÆÂΩπÂâ≤„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
        } else {
          console.log(`‚úÖ ${member.user_name} „ÅÆÂΩπÂâ≤OK:`, `"${member.role_in_team}"`);
        }
      });

      console.log("=== VALIDATION ERRORS ===");
      console.log("validationErrors:", validationErrors);
      console.log("validationErrors.length:", validationErrors.length);

      if (validationErrors.length > 0) {
        console.log("‚ùå „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÅÇ„Çä„ÄÅÂá¶ÁêÜ„ÇíÂÅúÊ≠¢");
        setErrors(validationErrors);
        setIsLoading(false);
        return;
      }

      console.log("‚úÖ „Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÈÄöÈÅé„ÄÅ„ÉÅ„Éº„É†‰ΩúÊàêÂá¶ÁêÜ„ÇíÈñãÂßã");

      console.log("=== TEAM CREATION DEBUG ===");
      console.log("newTeam:", newTeam);
      console.log("selectedMembers:", selectedMembers);

      const memberDataToSend = selectedMembers.map((member) => ({
        user_id: member.user_id,
        role_in_team: member.role_in_team === "unspecified" ? null : member.role_in_team,
      }));

      const requestBody = {
        course_step_id: newTeam.course_step_id as number,
        name: newTeam.name.trim(),
        project_name: newTeam.project_name?.trim() || null,
        member_data: memberDataToSend,
        creator_role: newTeam.creator_role === "unspecified" ? null : newTeam.creator_role,
      };

      console.log("üì§ API REQUEST:");
      console.log("URL: POST /api/teams");
      console.log("Body:", JSON.stringify(requestBody, null, 2));

      const response = await fetch("/api/teams", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      console.log("üì• API RESPONSE:");
      console.log("Status:", response.status, response.statusText);
      console.log("Headers:", Object.fromEntries(response.headers.entries()));

      const data = await response.json();
      console.log("Response Data:", JSON.stringify(data, null, 2));
      console.log("Error Message:", data.error);
      console.log("Error Details:", data.details);

      if (data.success) {
        setSuccessMessage("„ÉÅ„Éº„É†„ÅåÊ≠£Â∏∏„Å´‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü");
        setIsCreateDialogOpen(false);
        setNewTeam({
          name: "",
          project_name: "",
          course_step_id: null,
          creator_role: "unspecified",
        });
        setSelectedMembers([]);
        loadData();
      } else {
        setErrors([data.error || "„ÉÅ„Éº„É†‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"]);
      }
    } catch (error) {
      console.error("„ÉÅ„Éº„É†‰ΩúÊàê„Ç®„É©„Éº:", error);
      setErrors(["„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü"]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSelectMember = (userOption: UserOption) => {
    if (!userOption || !userOption.id) return;

    if (!selectedMembers.some((member) => member.user_id === userOption.id)) {
      setSelectedMembers((prev) => {
        const currentMembers = Array.isArray(prev) ? prev : [];
        // „É¶„Éº„Ç∂„Éº„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´ÂΩπÂâ≤„ÅåÊúâÂäπ„Å™Â†¥Âêà„ÅØ„Åù„Çå„Çí‰ΩøÁî®„ÄÅ„Åù„ÅÜ„Åß„Å™„Åë„Çå„Å∞ "unspecified"
        const validRoles = ["biz", "tech", "design"];
        const initialRole = validRoles.includes(userOption.role || "") ? userOption.role : "unspecified";

        return [
          ...currentMembers,
          {
            user_id: userOption.id,
            user_name: userOption.name,
            user_email: userOption.email,
            role_in_team: initialRole,
          },
        ];
      });
    }
    setIsUserDropdownOpen(false);
    setSearchQuery("");
  };

  const handleMemberRoleChange = (userId: number, role: string) => {
    setSelectedMembers((prev) => prev.map((member) => (member.user_id === userId ? { ...member, role_in_team: role } : member)));
  };

  const handleRemoveMember = (userId: number) => {
    if (!userId) return;

    setSelectedMembers((prev) => {
      const currentMembers = Array.isArray(prev) ? prev : [];
      return currentMembers.filter((member) => member && member.user_id !== userId);
    });
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("ja-JP", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  // Ë°®Á§∫Áî®„ÅÆgetRoleLabelÈñ¢Êï∞Ôºà„É≠„Ç∞„ÇíÂâäÈô§Ôºâ
  const getRoleLabel = (role: string | null) => {
    if (role === null || role === undefined || role === "" || role === "unspecified") {
      return "Êú™ÊåáÂÆö";
    }

    const normalized = String(role).trim().toLowerCase();
    const roleMap: Record<string, string> = {
      tech: "Tech",
      biz: "Biz",
      design: "Design",
      "tech lead": "Tech",
      developer: "Tech",
      designer: "Design",
      pm: "Biz",
      „ÉÜ„ÉÉ„ÇØ: "Tech",
      „Éì„Ç∫: "Biz",
      „Éá„Ç∂„Ç§„É≥: "Design",
      „Ç®„É≥„Ç∏„Éã„Ç¢: "Tech",
      „Éó„É≠„Ç∞„É©„Éû„Éº: "Tech",
      „Éì„Ç∏„Éç„Çπ: "Biz",
      „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éû„Éç„Éº„Ç∏„É£„Éº: "Biz",
      "ui/ux": "Design",
      „Éá„Ç∂„Ç§„Éä„Éº: "Design",
    };

    return roleMap[normalized] || "Êú™ÊåáÂÆö";
  };

  const teamsByStep = courseSteps
    .map((step) => {
      return {
        step,
        teams: teams.filter((team) => team.course_step_id === step.id),
      };
    })
    .filter(({ teams }) => teams.length > 0);

  return (
    <div className="min-h-screen p-4 bg-[#F8F9FA]">
      <div className="max-w-6xl mx-auto">
        {/* „Éò„ÉÉ„ÉÄ„Éº */}
        <div className="flex items-center gap-4 mb-6">
          <Button variant="outline" size="icon" onClick={() => onNavigate("search-results")} className="border-2 border-gray-300 hover:border-[#5D70F7]">
            <ArrowLeft className="w-4 h-4" />
          </Button>
          <div className="flex-1">
            <h1 className="text-2xl font-semibold text-[#343A40]">„ÉÅ„Éº„É†ÁÆ°ÁêÜ</h1>
            <p className="text-[#6C757D]">ÂêÑ„Çπ„ÉÜ„ÉÉ„Éó„Åß„ÅÆ„ÉÅ„Éº„É†ÊÉÖÂ†±„ÇíÁÆ°ÁêÜ</p>
          </div>
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-[#4CAF50] hover:bg-[#45A049] text-white">
                <Plus className="w-4 h-4 mr-2" />
                Êñ∞„Åó„ÅÑ„ÉÅ„Éº„É†‰ΩúÊàê
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Êñ∞„Åó„ÅÑ„ÉÅ„Éº„É†‰ΩúÊàê</DialogTitle>
                <DialogDescription>„ÉÅ„Éº„É†„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂÖ•Âäõ„Åó„ÄÅ„É°„É≥„Éê„Éº„Å®ÂΩπÂâ≤„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-[#343A40]">„Çπ„ÉÜ„ÉÉ„ÉóÈÅ∏Êäû</label>
                  <Select value={newTeam.course_step_id?.toString() || ""} onValueChange={(value) => setNewTeam({ ...newTeam, course_step_id: Number.parseInt(value) })}>
                    <SelectTrigger>
                      <SelectValue placeholder="„Çπ„ÉÜ„ÉÉ„Éó„ÇíÈÅ∏Êäû" />
                    </SelectTrigger>
                    <SelectContent>
                      {courseSteps.length === 0 ? (
                        <SelectItem value="" disabled>
                          „Çπ„ÉÜ„ÉÉ„Éó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì
                        </SelectItem>
                      ) : (
                        courseSteps.map((course) => (
                          <SelectItem key={course.id} value={course.id.toString()}>
                            {course.name}
                          </SelectItem>
                        ))
                      )}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="text-sm font-medium text-[#343A40]">„ÉÅ„Éº„É†Âêç</label>
                  <Input placeholder="‰æã: Team Alpha" value={newTeam.name} onChange={(e) => setNewTeam({ ...newTeam, name: e.target.value })} />
                </div>

                <div>
                  <label className="text-sm font-medium text-[#343A40]">„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêçÔºà‰ªªÊÑèÔºâ</label>
                  <Input placeholder="‰æã: Â≠¶ÁøíÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†" value={newTeam.project_name} onChange={(e) => setNewTeam({ ...newTeam, project_name: e.target.value })} />
                </div>

                <div>
                  <label className="text-sm font-medium text-[#343A40]">„ÅÇ„Å™„Åü„ÅÆÂΩπÂâ≤</label>
                  <Select value={newTeam.creator_role} onValueChange={(value) => setNewTeam({ ...newTeam, creator_role: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="ÂΩπÂâ≤„ÇíÈÅ∏Êäû" />
                    </SelectTrigger>
                    <SelectContent>
                      {createTeamRoleOptions
                        .filter((opt) => opt.value !== "unspecified")
                        .map((role) => (
                          <SelectItem key={role.value} value={role.value}>
                            {role.label}
                          </SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="text-sm font-medium text-[#343A40]">„É°„É≥„Éê„ÉºÈÅ∏Êäû„Å®ÂΩπÂâ≤Ë®≠ÂÆö</label>

                  {/* ÈÅ∏ÊäûÊ∏à„Åø„É°„É≥„Éê„Éº„Å®ÂΩπÂâ≤Ë°®Á§∫ */}
                  {Array.isArray(selectedMembers) && selectedMembers.length > 0 && (
                    <div className="space-y-3 mb-4 p-4 bg-gray-50 rounded-lg">
                      <h4 className="text-sm font-medium">ÈÅ∏ÊäûÊ∏à„Åø„É°„É≥„Éê„Éº ({selectedMembers.length}‰∫∫)</h4>
                      {selectedMembers
                        .filter((member) => member && member.user_id)
                        .map((member) => (
                          <div key={member.user_id} className="flex items-center justify-between p-3 bg-white rounded-lg border">
                            <div className="flex items-center gap-3">
                              <div className="w-8 h-8 bg-gradient-to-br from-[#5D70F7] to-[#38C9B9] rounded-full flex items-center justify-center">
                                <User className="w-4 h-4 text-white" />
                              </div>
                              <div>
                                <div className="font-medium text-[#343A40]">{member.user_name}</div>
                                <div className="text-xs text-[#6C757D]">{member.user_email}</div>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <Select value={member.role_in_team || "unspecified"} onValueChange={(value) => handleMemberRoleChange(member.user_id, value)}>
                                <SelectTrigger className="w-32">
                                  <SelectValue placeholder="ÂΩπÂâ≤ÈÅ∏Êäû" />
                                </SelectTrigger>
                                <SelectContent>
                                  {createTeamRoleOptions.map((role) => (
                                    <SelectItem key={role.value} value={role.value}>
                                      {role.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <Button variant="outline" size="sm" onClick={() => handleRemoveMember(member.user_id)} className="px-2 py-1 h-8">
                                <X className="h-3 w-3" />
                              </Button>
                            </div>
                          </div>
                        ))}
                    </div>
                  )}

                  {/* „É°„É≥„Éê„ÉºÊ§úÁ¥¢„ÉªÈÅ∏Êäû */}
                  <Popover open={isUserDropdownOpen} onOpenChange={setIsUserDropdownOpen}>
                    <PopoverTrigger asChild>
                      <Button variant="outline" role="combobox" aria-expanded={isUserDropdownOpen} className="w-full justify-between">
                        <span className="truncate">„É°„É≥„Éê„Éº„ÇíËøΩÂä†</span>
                        <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-full p-0">
                      <Command>
                        <CommandInput placeholder="ÂêçÂâç„Åæ„Åü„ÅØ„É°„Éº„É´„ÅßÊ§úÁ¥¢..." value={searchQuery} onValueChange={setSearchQuery} className="h-9" />
                        <CommandList>
                          <CommandEmpty>Ë©≤ÂΩì„Åô„Çã„É¶„Éº„Ç∂„Éº„Åå„ÅÑ„Åæ„Åõ„Çì</CommandEmpty>
                          <CommandGroup>
                            <ScrollArea className="h-60">
                              {userOptions.map((user) => (
                                <CommandItem key={user.id} value={user.id.toString()} onSelect={() => handleSelectMember(user)} className="flex items-center justify-between">
                                  <div className="flex flex-col">
                                    <span>{user.name}</span>
                                    <span className="text-xs text-gray-500">{user.email}</span>
                                  </div>
                                  {user.role && (
                                    <Badge variant="outline" className="ml-2">
                                      {getRoleLabel(user.role)}
                                    </Badge>
                                  )}
                                </CommandItem>
                              ))}
                            </ScrollArea>
                          </CommandGroup>
                        </CommandList>
                      </Command>
                    </PopoverContent>
                  </Popover>
                </div>

                {errors.length > 0 && (
                  <Alert className="border-red-200 bg-red-50">
                    <AlertCircle className="h-4 w-4 text-red-600" />
                    <AlertDescription className="text-red-800">
                      {errors.map((error, index) => (
                        <div key={index}>{error}</div>
                      ))}
                    </AlertDescription>
                  </Alert>
                )}

                <Button onClick={handleCreateTeam} disabled={isLoading} className="w-full bg-[#4CAF50] hover:bg-[#45A049]">
                  {isLoading ? "‰ΩúÊàê‰∏≠..." : "„ÉÅ„Éº„É†‰ΩúÊàê"}
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {/* ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏ */}
        {successMessage && (
          <Alert className="mb-6 border-green-200 bg-green-50">
            <CheckCircle className="h-4 w-4 text-green-600" />
            <AlertDescription className="text-green-800">{successMessage}</AlertDescription>
          </Alert>
        )}

        {/* „Çπ„ÉÜ„ÉÉ„Éó„Éï„Ç£„É´„Çø„Éº */}
        <Card className="border border-gray-200 shadow-sm mb-6">
          <CardContent className="p-4">
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium text-[#343A40]">„Çπ„ÉÜ„ÉÉ„Éó„ÅßÁµû„ÇäËæº„Åø:</label>
              <Select value={selectedCourseStep?.toString() || "all"} onValueChange={(value) => setSelectedCourseStep(value === "all" ? null : Number.parseInt(value))}>
                <SelectTrigger className="w-64">
                  <SelectValue placeholder="„Çπ„ÉÜ„ÉÉ„Éó„ÇíÈÅ∏Êäû" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">„Åô„Åπ„Å¶Ë°®Á§∫</SelectItem>
                  {courseSteps.map((course) => (
                    <SelectItem key={course.id} value={course.id.toString()}>
                      {course.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* „Çπ„ÉÜ„ÉÉ„Éó„Åî„Å®„ÅÆ„ÉÅ„Éº„É†‰∏ÄË¶ß */}
        {selectedCourseStep !== null ? (
          // ÁâπÂÆö„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà
          <div className="space-y-6">
            {teams.length === 0 ? (
              <Card className="border border-gray-200 shadow-sm p-8 text-center">
                <div className="text-6xl mb-4">üë•</div>
                <h3 className="text-lg font-semibold text-[#343A40] mb-2">„Åì„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆ„ÉÅ„Éº„É†„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h3>
                <p className="text-[#6C757D]">Êñ∞„Åó„ÅÑ„ÉÅ„Éº„É†„Çí‰ΩúÊàê„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ</p>
              </Card>
            ) : (
              teams.map((team) => (
                <Card key={team.id} className="border border-gray-200 shadow-sm">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div>
                        <CardTitle className="flex items-center gap-2 text-[#343A40]">
                          <Users className="w-5 h-5 text-[#5D70F7]" />
                          {team.name}
                        </CardTitle>
                        <div className="flex items-center gap-4 mt-2">
                          {team.project_name && <Badge className="bg-[#4CAF50]/10 text-[#2E7D32] border-[#4CAF50]/20 text-xs">{team.project_name}</Badge>}
                          <div className="flex items-center gap-1 text-xs text-[#6C757D]">
                            <Calendar className="w-3 h-3" />
                            {formatDate(team.created_at)}
                          </div>
                        </div>
                      </div>
                      <Button variant="outline" size="sm" onClick={() => deleteTeam(team.id, team.name)} disabled={isLoading} className="border-red-200 text-red-600 hover:bg-red-50 hover:border-red-300">
                        <Trash2 className="w-4 h-4 mr-1" />
                        ÂâäÈô§
                      </Button>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <h3 className="text-sm font-medium text-[#343A40]">„É°„É≥„Éê„Éº ({team.members.length}‰∫∫)</h3>
                      {team.members.map((member) => (
                        <div key={member.user_id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 bg-gradient-to-br from-[#5D70F7] to-[#38C9B9] rounded-full flex items-center justify-center">
                              <User className="w-4 h-4 text-white" />
                            </div>
                            <div>
                              <div className="font-medium text-[#343A40]">{member.user_name}</div>
                              <div className="text-sm text-[#6C757D]">{member.user_email}</div>
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            <Badge variant="outline" className="text-xs">
                              {getRoleLabel(member.role_in_team)}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        ) : (
          // „Åô„Åπ„Å¶„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÇíË°®Á§∫„Åô„ÇãÂ†¥Âêà
          <div className="space-y-10">
            {teamsByStep.length === 0 ? (
              <Card className="border border-gray-200 shadow-sm p-8 text-center">
                <div className="text-6xl mb-4">üë•</div>
                <h3 className="text-lg font-semibold text-[#343A40] mb-2">„Åæ„Å†„ÉÅ„Éº„É†„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h3>
                <p className="text-[#6C757D]">Êñ∞„Åó„ÅÑ„ÉÅ„Éº„É†„Çí‰ΩúÊàê„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ</p>
              </Card>
            ) : (
              teamsByStep.map(({ step, teams }) => (
                <div key={step.id}>
                  <h2 className="text-xl font-semibold text-[#343A40] mb-4 flex items-center">
                    <Badge className="mr-2 bg-[#5D70F7] text-white">{step.name}</Badge>
                  </h2>

                  <div className="space-y-4">
                    {teams.map((team) => (
                      <Card key={team.id} className="border border-gray-200 shadow-sm">
                        <CardHeader>
                          <div className="flex items-start justify-between">
                            <div>
                              <CardTitle className="flex items-center gap-2 text-[#343A40]">
                                <Users className="w-5 h-5 text-[#5D70F7]" />
                                {team.name}
                              </CardTitle>
                              <div className="flex items-center gap-4 mt-2">
                                {team.project_name && <Badge className="bg-[#4CAF50]/10 text-[#2E7D32] border-[#4CAF50]/20 text-xs">{team.project_name}</Badge>}
                                <div className="flex items-center gap-1 text-xs text-[#6C757D]">
                                  <Calendar className="w-3 h-3" />
                                  {formatDate(team.created_at)}
                                </div>
                              </div>
                            </div>
                            <Button variant="outline" size="sm" onClick={() => deleteTeam(team.id, team.name)} disabled={isLoading} className="border-red-200 text-red-600 hover:bg-red-50 hover:border-red-300">
                              <Trash2 className="w-4 h-4 mr-1" />
                              ÂâäÈô§
                            </Button>
                          </div>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-3">
                            <h3 className="text-sm font-medium text-[#343A40]">„É°„É≥„Éê„Éº ({team.members.length}‰∫∫)</h3>
                            {team.members.map((member) => (
                              <div key={member.user_id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                <div className="flex items-center gap-3">
                                  <div className="w-8 h-8 bg-gradient-to-br from-[#5D70F7] to-[#38C9B9] rounded-full flex items-center justify-center">
                                    <User className="w-4 h-4 text-white" />
                                  </div>
                                  <div>
                                    <div className="font-medium text-[#343A40]">{member.user_name}</div>
                                    <div className="text-sm text-[#6C757D]">{member.user_email}</div>
                                  </div>
                                </div>
                                <div className="flex items-center gap-2">
                                  <Badge variant="outline" className="text-xs">
                                    {getRoleLabel(member.role_in_team)}
                                  </Badge>
                                </div>
                              </div>
                            ))}
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              ))
            )}
          </div>
        )}
      </div>
    </div>
  );
}
